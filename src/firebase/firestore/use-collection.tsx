// This file is automatically generated. Do not modify it.
'use client';
import { useState, useEffect, useRef } from 'react';
import {
  collection,
  onSnapshot,
  query,
  Query,
  QuerySnapshot,
  DocumentData,
  FirestoreError,
  CollectionReference,
  doc,
} from 'firebase/firestore';
import { useFirestore } from '../provider';
import { errorEmitter } from '../error-emitter';
import {
  FirestorePermissionError,
  type SecurityRuleContext,
} from '../errors';
interface CollectionHook<T> {
  data: T[] | null;
  loading: boolean;
  error: FirestoreError | null;
  snapshot: QuerySnapshot<DocumentData> | null;
}

/**
 * A hook to listen to a Firestore collection.
 * @param q - The Query to listen to.
 * @returns An object with the collection data, loading state, and any error.
 */
export function useCollection<T>(q: Query | null): CollectionHook<T> {
  const [data, setData] = useState<T[] | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<FirestoreError | null>(null);
  const [snapshot, setSnapshot] = useState<QuerySnapshot<DocumentData> | null>(
    null
  );

  const queryRef = useRef(q);
  useEffect(() => {
    queryRef.current = q;
  },[q]);

  useEffect(() => {
    if (!queryRef.current) {
      setLoading(false);
      setData([]);
      return;
    }

    setLoading(true);
    const unsubscribe = onSnapshot(
      queryRef.current,
      (snapshot) => {
        const data = snapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        })) as T[];
        setData(data);
        setSnapshot(snapshot);
        setLoading(false);
        setError(null);
      },
      async (err) => {
        const collectionRef = queryRef.current as Query<DocumentData> as CollectionReference;
        const path = collectionRef.path;
        const permissionError = new FirestorePermissionError({
          path,
          operation: 'list',
        } satisfies SecurityRuleContext);
        errorEmitter.emit('permission-error', permissionError);
        setError(err);
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, [q]);

  return { data, loading, error, snapshot };
}
