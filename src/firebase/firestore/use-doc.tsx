// This file is automatically generated. Do not modify it.
'use client';
import { useState, useEffect, useMemo } from 'react';
import {
  onSnapshot,
  doc,
  DocumentReference,
  DocumentData,
  FirestoreError,
} from 'firebase/firestore';
import { useFirestore } from '../provider';
import { errorEmitter } from '../error-emitter';
import {
  FirestorePermissionError,
  type SecurityRuleContext,
} from '../errors';

interface DocHook<T> {
  data: T | null;
  loading: boolean;
  error: FirestoreError | null;
}

/**
 * A hook to listen to a single Firestore document.
 * @param ref - The DocumentReference to listen to.
 * @returns An object with the document data, loading state, and any error.
 */
export function useDoc<T>(ref: DocumentReference | null): DocHook<T> {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<FirestoreError | null>(null);

  useEffect(() => {
    if (!ref) {
      setLoading(false);
      return;
    }

    setLoading(true);
    const unsubscribe = onSnapshot(
      ref,
      (snapshot) => {
        setData(snapshot.exists() ? (snapshot.data() as T) : null);
        setLoading(false);
        setError(null);
      },
      async (err) => {
        const permissionError = new FirestorePermissionError({
          path: ref.path,
          operation: 'get',
        } satisfies SecurityRuleContext);
        errorEmitter.emit('permission-error', permissionError);
        setError(err);
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, [ref]);

  return { data, loading, error };
}

/**
 * A memoized version of the `doc` function from `firebase/firestore`.
 * This is useful for preventing re-renders when the path is the same.
 * @param path - The path to the document.
 * @param pathSegments - The path segments.
 * @returns A memoized DocumentReference.
 */
export function useMemoizedDoc<T>(
  path: string,
  ...pathSegments: string[]
): DocumentReference<T> | null {
  const firestore = useFirestore();

  const ref = useMemo(() => {
    if (!firestore) return null;
    return doc(firestore, path, ...pathSegments) as DocumentReference<T>;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [firestore, path, ...pathSegments]);

  return ref;
}
